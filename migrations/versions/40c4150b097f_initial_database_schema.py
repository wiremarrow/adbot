"""Initial database schema

Revision ID: 40c4150b097f
Revises: 
Create Date: 2025-07-05 16:47:43.986068

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = '40c4150b097f'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('anomaly_detection',
    sa.Column('entity_type', sa.String(length=50), nullable=False),
    sa.Column('entity_id', sa.UUID(), nullable=False),
    sa.Column('platform', sa.String(length=50), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('metric_name', sa.String(length=100), nullable=False),
    sa.Column('expected_value', sa.Float(), nullable=False),
    sa.Column('actual_value', sa.Float(), nullable=False),
    sa.Column('anomaly_score', sa.Float(), nullable=False),
    sa.Column('severity', sa.String(length=20), nullable=False),
    sa.Column('detection_method', sa.String(length=100), nullable=False),
    sa.Column('confidence', sa.Float(), nullable=False),
    sa.Column('acknowledged', sa.Boolean(), nullable=False),
    sa.Column('resolved', sa.Boolean(), nullable=False),
    sa.Column('resolution_notes', sa.String(length=1000), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_anomaly_date', 'anomaly_detection', ['date'], unique=False)
    op.create_index('idx_anomaly_entity', 'anomaly_detection', ['entity_type', 'entity_id'], unique=False)
    op.create_index('idx_anomaly_severity', 'anomaly_detection', ['severity'], unique=False)
    op.create_index('idx_anomaly_unresolved', 'anomaly_detection', ['resolved', 'acknowledged'], unique=False)
    op.create_table('bid_history',
    sa.Column('entity_type', sa.String(length=50), nullable=False),
    sa.Column('entity_id', sa.UUID(), nullable=False),
    sa.Column('platform', sa.String(length=50), nullable=False),
    sa.Column('old_bid', sa.Numeric(precision=8, scale=4), nullable=True),
    sa.Column('new_bid', sa.Numeric(precision=8, scale=4), nullable=False),
    sa.Column('bid_type', sa.String(length=50), nullable=False),
    sa.Column('reason', sa.String(length=500), nullable=True),
    sa.Column('optimizer_used', sa.String(length=100), nullable=True),
    sa.Column('confidence_score', sa.Float(), nullable=True),
    sa.Column('previous_performance', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('expected_performance', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_bid_history_created', 'bid_history', ['created_at'], unique=False)
    op.create_index('idx_bid_history_entity', 'bid_history', ['entity_type', 'entity_id'], unique=False)
    op.create_index('idx_bid_history_platform', 'bid_history', ['platform'], unique=False)
    op.create_table('users',
    sa.Column('email', sa.String(length=255), nullable=False),
    sa.Column('username', sa.String(length=100), nullable=False),
    sa.Column('first_name', sa.String(length=100), nullable=False),
    sa.Column('last_name', sa.String(length=100), nullable=False),
    sa.Column('password_hash', sa.String(length=255), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.Column('role', sa.Enum('ADMIN', 'MANAGER', 'ANALYST', 'VIEWER', name='userrole'), nullable=False),
    sa.Column('permissions', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('avatar_url', sa.String(length=500), nullable=True),
    sa.Column('timezone', sa.String(length=50), nullable=False),
    sa.Column('language', sa.String(length=10), nullable=False),
    sa.Column('notification_settings', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('dashboard_settings', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email'),
    sa.UniqueConstraint('username')
    )
    op.create_index('idx_user_active', 'users', ['is_active'], unique=False)
    op.create_index('idx_user_email', 'users', ['email'], unique=False)
    op.create_index('idx_user_role', 'users', ['role'], unique=False)
    op.create_index('idx_user_username', 'users', ['username'], unique=False)
    op.create_table('accounts',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'SUSPENDED', 'TRIAL', 'EXPIRED', name='accountstatus'), nullable=False),
    sa.Column('subscription_tier', sa.String(length=50), nullable=False),
    sa.Column('billing_email', sa.String(length=255), nullable=True),
    sa.Column('billing_address', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('monthly_budget_limit', sa.String(length=20), nullable=True),
    sa.Column('api_rate_limit', sa.String(length=20), nullable=False),
    sa.Column('campaigns_count', sa.String(length=20), nullable=False),
    sa.Column('last_activity', sa.DateTime(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_account_name', 'accounts', ['name'], unique=False)
    op.create_index('idx_account_status', 'accounts', ['status'], unique=False)
    op.create_index('idx_account_user_id', 'accounts', ['user_id'], unique=False)
    op.create_table('api_keys',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('key_hash', sa.String(length=255), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('expires_at', sa.DateTime(), nullable=True),
    sa.Column('permissions', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('rate_limit', sa.String(length=20), nullable=False),
    sa.Column('last_used', sa.DateTime(), nullable=True),
    sa.Column('usage_count', sa.String(length=20), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('key_hash')
    )
    op.create_index('idx_api_key_active', 'api_keys', ['is_active'], unique=False)
    op.create_index('idx_api_key_expires', 'api_keys', ['expires_at'], unique=False)
    op.create_index('idx_api_key_user_id', 'api_keys', ['user_id'], unique=False)
    op.create_table('agents',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('agent_type', sa.String(length=50), nullable=False),
    sa.Column('account_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Enum('TRAINING', 'DEPLOYED', 'PAUSED', 'ARCHIVED', name='agentstatus'), nullable=False),
    sa.Column('environment_type', sa.String(length=100), nullable=False),
    sa.Column('environment_config', sa.JSON(), nullable=False),
    sa.Column('agent_config', sa.JSON(), nullable=False),
    sa.Column('hyperparameters', sa.JSON(), nullable=False),
    sa.Column('model_path', sa.String(length=500), nullable=True),
    sa.Column('model_version', sa.String(length=50), nullable=True),
    sa.Column('model_size_mb', sa.Float(), nullable=True),
    sa.Column('best_reward', sa.Float(), nullable=True),
    sa.Column('best_episode', sa.Integer(), nullable=True),
    sa.Column('total_episodes', sa.Integer(), nullable=False),
    sa.Column('total_timesteps', sa.Integer(), nullable=False),
    sa.Column('training_start', sa.DateTime(), nullable=True),
    sa.Column('training_end', sa.DateTime(), nullable=True),
    sa.Column('training_duration_seconds', sa.Integer(), nullable=True),
    sa.Column('deployed_at', sa.DateTime(), nullable=True),
    sa.Column('deployment_version', sa.String(length=50), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_agent_account_id', 'agents', ['account_id'], unique=False)
    op.create_index('idx_agent_deployed', 'agents', ['deployed_at'], unique=False)
    op.create_index('idx_agent_status', 'agents', ['status'], unique=False)
    op.create_index('idx_agent_type', 'agents', ['agent_type'], unique=False)
    op.create_table('campaigns',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('platform', sa.String(length=50), nullable=False),
    sa.Column('platform_id', sa.String(length=255), nullable=False),
    sa.Column('account_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'PAUSED', 'ENDED', 'DRAFT', name='campaignstatus'), nullable=False),
    sa.Column('budget_type', sa.String(length=50), nullable=False),
    sa.Column('budget_amount', sa.Numeric(precision=10, scale=2), nullable=False),
    sa.Column('target_cpa', sa.Numeric(precision=8, scale=2), nullable=True),
    sa.Column('target_roas', sa.Numeric(precision=5, scale=2), nullable=True),
    sa.Column('start_date', sa.DateTime(), nullable=False),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('geo_targets', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('language_targets', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('device_targets', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('optimization_goal', sa.String(length=100), nullable=True),
    sa.Column('bid_strategy', sa.String(length=100), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_campaign_account_id', 'campaigns', ['account_id'], unique=False)
    op.create_index('idx_campaign_platform_id', 'campaigns', ['platform', 'platform_id'], unique=False)
    op.create_index('idx_campaign_status', 'campaigns', ['status'], unique=False)
    op.create_table('experiments',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('hypothesis', sa.Text(), nullable=True),
    sa.Column('experiment_type', sa.Enum('AB_TEST', 'MULTIVARIATE', 'BANDIT', 'SEQUENTIAL', name='experimenttype'), nullable=False),
    sa.Column('status', sa.Enum('DRAFT', 'RUNNING', 'PAUSED', 'COMPLETED', 'CANCELLED', name='experimentstatus'), nullable=False),
    sa.Column('account_id', sa.UUID(), nullable=False),
    sa.Column('campaign_ids', sa.JSON(), nullable=False),
    sa.Column('platform', sa.String(length=50), nullable=False),
    sa.Column('traffic_allocation', sa.Float(), nullable=False),
    sa.Column('variants', sa.JSON(), nullable=False),
    sa.Column('primary_metric', sa.String(length=100), nullable=False),
    sa.Column('secondary_metrics', sa.JSON(), nullable=False),
    sa.Column('significance_level', sa.Float(), nullable=False),
    sa.Column('minimum_detectable_effect', sa.Float(), nullable=False),
    sa.Column('statistical_power', sa.Float(), nullable=False),
    sa.Column('start_date', sa.DateTime(), nullable=True),
    sa.Column('end_date', sa.DateTime(), nullable=True),
    sa.Column('duration_days', sa.Integer(), nullable=True),
    sa.Column('required_sample_size', sa.Integer(), nullable=True),
    sa.Column('actual_sample_size', sa.Integer(), nullable=False),
    sa.Column('winner_variant', sa.String(length=100), nullable=True),
    sa.Column('confidence_level', sa.Float(), nullable=True),
    sa.Column('p_value', sa.Float(), nullable=True),
    sa.Column('effect_size', sa.Float(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_experiment_account_id', 'experiments', ['account_id'], unique=False)
    op.create_index('idx_experiment_dates', 'experiments', ['start_date', 'end_date'], unique=False)
    op.create_index('idx_experiment_platform', 'experiments', ['platform'], unique=False)
    op.create_index('idx_experiment_status', 'experiments', ['status'], unique=False)
    op.create_table('platforms',
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('display_name', sa.String(length=100), nullable=False),
    sa.Column('account_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Enum('CONNECTED', 'DISCONNECTED', 'ERROR', 'PENDING', name='platformstatus'), nullable=False),
    sa.Column('platform_account_id', sa.String(length=255), nullable=True),
    sa.Column('platform_account_name', sa.String(length=255), nullable=True),
    sa.Column('api_credentials', postgresql.JSON(astext_type=sa.Text()), nullable=True),
    sa.Column('connected_at', sa.DateTime(), nullable=True),
    sa.Column('last_sync', sa.DateTime(), nullable=True),
    sa.Column('sync_frequency', sa.String(length=20), nullable=False),
    sa.Column('health_score', sa.String(length=20), nullable=False),
    sa.Column('last_error', sa.Text(), nullable=True),
    sa.Column('error_count', sa.String(length=20), nullable=False),
    sa.Column('sync_settings', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('webhook_settings', postgresql.JSON(astext_type=sa.Text()), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['account_id'], ['accounts.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_platform_account_id', 'platforms', ['account_id'], unique=False)
    op.create_index('idx_platform_last_sync', 'platforms', ['last_sync'], unique=False)
    op.create_index('idx_platform_name', 'platforms', ['name'], unique=False)
    op.create_index('idx_platform_status', 'platforms', ['status'], unique=False)
    op.create_table('ad_groups',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('platform_id', sa.String(length=255), nullable=False),
    sa.Column('campaign_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'PAUSED', 'REMOVED', name='adgroupstatus'), nullable=False),
    sa.Column('default_cpc', sa.Numeric(precision=8, scale=2), nullable=True),
    sa.Column('default_cpm', sa.Numeric(precision=8, scale=2), nullable=True),
    sa.Column('audience_targets', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('placement_targets', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['campaign_id'], ['campaigns.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_adgroup_campaign_id', 'ad_groups', ['campaign_id'], unique=False)
    op.create_index('idx_adgroup_platform_id', 'ad_groups', ['platform_id'], unique=False)
    op.create_table('agent_configs',
    sa.Column('agent_id', sa.UUID(), nullable=False),
    sa.Column('config_name', sa.String(length=255), nullable=False),
    sa.Column('version', sa.String(length=50), nullable=False),
    sa.Column('config_data', sa.JSON(), nullable=False),
    sa.Column('config_hash', sa.String(length=64), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('performance_metrics', sa.JSON(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_agent_config_active', 'agent_configs', ['is_active'], unique=False)
    op.create_index('idx_agent_config_agent_id', 'agent_configs', ['agent_id'], unique=False)
    op.create_index('idx_agent_config_hash', 'agent_configs', ['config_hash'], unique=False)
    op.create_table('bandit_arms',
    sa.Column('experiment_id', sa.UUID(), nullable=False),
    sa.Column('arm_name', sa.String(length=100), nullable=False),
    sa.Column('arm_config', sa.JSON(), nullable=False),
    sa.Column('pulls', sa.Integer(), nullable=False),
    sa.Column('rewards', sa.Float(), nullable=False),
    sa.Column('alpha', sa.Float(), nullable=False),
    sa.Column('beta', sa.Float(), nullable=False),
    sa.Column('confidence_bound', sa.Float(), nullable=False),
    sa.Column('conversion_rate', sa.Float(), nullable=False),
    sa.Column('average_reward', sa.Float(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['experiment_id'], ['experiments.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_bandit_arm_experiment_id', 'bandit_arms', ['experiment_id'], unique=False)
    op.create_index('idx_bandit_arm_name', 'bandit_arms', ['arm_name'], unique=False)
    op.create_table('conversion_data',
    sa.Column('conversion_id', sa.String(length=255), nullable=False),
    sa.Column('platform', sa.String(length=50), nullable=False),
    sa.Column('campaign_id', sa.UUID(), nullable=False),
    sa.Column('conversion_type', sa.String(length=100), nullable=False),
    sa.Column('conversion_value', sa.Numeric(precision=12, scale=4), nullable=False),
    sa.Column('conversion_timestamp', sa.DateTime(), nullable=False),
    sa.Column('click_timestamp', sa.DateTime(), nullable=True),
    sa.Column('view_timestamp', sa.DateTime(), nullable=True),
    sa.Column('attribution_model', sa.String(length=50), nullable=False),
    sa.Column('user_agent', sa.String(length=500), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('device_type', sa.String(length=50), nullable=True),
    sa.Column('geo_location', sa.String(length=100), nullable=True),
    sa.Column('product_id', sa.String(length=255), nullable=True),
    sa.Column('product_category', sa.String(length=100), nullable=True),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['campaign_id'], ['campaigns.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('conversion_id')
    )
    op.create_index('idx_conversion_campaign_id', 'conversion_data', ['campaign_id'], unique=False)
    op.create_index('idx_conversion_platform', 'conversion_data', ['platform'], unique=False)
    op.create_index('idx_conversion_timestamp', 'conversion_data', ['conversion_timestamp'], unique=False)
    op.create_index('idx_conversion_type', 'conversion_data', ['conversion_type'], unique=False)
    op.create_table('experiment_assignments',
    sa.Column('experiment_id', sa.UUID(), nullable=False),
    sa.Column('entity_id', sa.String(length=255), nullable=False),
    sa.Column('entity_type', sa.String(length=50), nullable=False),
    sa.Column('variant_name', sa.String(length=100), nullable=False),
    sa.Column('assigned_at', sa.DateTime(), nullable=False),
    sa.Column('first_exposure', sa.DateTime(), nullable=True),
    sa.Column('last_exposure', sa.DateTime(), nullable=True),
    sa.Column('exposure_count', sa.Integer(), nullable=False),
    sa.Column('converted', sa.Boolean(), nullable=False),
    sa.Column('conversion_value', sa.Float(), nullable=False),
    sa.Column('conversion_timestamp', sa.DateTime(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['experiment_id'], ['experiments.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_experiment_assignment_entity', 'experiment_assignments', ['entity_id', 'entity_type'], unique=False)
    op.create_index('idx_experiment_assignment_exp_id', 'experiment_assignments', ['experiment_id'], unique=False)
    op.create_index('idx_experiment_assignment_variant', 'experiment_assignments', ['variant_name'], unique=False)
    op.create_table('experiment_results',
    sa.Column('experiment_id', sa.UUID(), nullable=False),
    sa.Column('variant_name', sa.String(length=100), nullable=False),
    sa.Column('metric_name', sa.String(length=100), nullable=False),
    sa.Column('date', sa.DateTime(), nullable=False),
    sa.Column('sample_size', sa.Integer(), nullable=False),
    sa.Column('value', sa.Float(), nullable=False),
    sa.Column('standard_error', sa.Float(), nullable=True),
    sa.Column('confidence_interval_lower', sa.Float(), nullable=True),
    sa.Column('confidence_interval_upper', sa.Float(), nullable=True),
    sa.Column('control_value', sa.Float(), nullable=True),
    sa.Column('lift', sa.Float(), nullable=True),
    sa.Column('p_value', sa.Float(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['experiment_id'], ['experiments.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_experiment_result_date', 'experiment_results', ['date'], unique=False)
    op.create_index('idx_experiment_result_exp_id', 'experiment_results', ['experiment_id'], unique=False)
    op.create_index('idx_experiment_result_metric', 'experiment_results', ['metric_name'], unique=False)
    op.create_index('idx_experiment_result_variant', 'experiment_results', ['variant_name'], unique=False)
    op.create_table('performance_metrics',
    sa.Column('entity_type', sa.String(length=50), nullable=False),
    sa.Column('entity_id', sa.UUID(), nullable=False),
    sa.Column('platform', sa.String(length=50), nullable=False),
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('impressions', sa.Integer(), nullable=False),
    sa.Column('clicks', sa.Integer(), nullable=False),
    sa.Column('conversions', sa.Integer(), nullable=False),
    sa.Column('cost', sa.Numeric(precision=12, scale=4), nullable=False),
    sa.Column('revenue', sa.Numeric(precision=12, scale=4), nullable=False),
    sa.Column('ctr', sa.Float(), nullable=False),
    sa.Column('cpc', sa.Numeric(precision=8, scale=4), nullable=False),
    sa.Column('cpm', sa.Numeric(precision=8, scale=4), nullable=False),
    sa.Column('cpa', sa.Numeric(precision=8, scale=4), nullable=False),
    sa.Column('roas', sa.Numeric(precision=8, scale=4), nullable=False),
    sa.Column('video_views', sa.Integer(), nullable=False),
    sa.Column('video_completions', sa.Integer(), nullable=False),
    sa.Column('likes', sa.Integer(), nullable=False),
    sa.Column('shares', sa.Integer(), nullable=False),
    sa.Column('comments', sa.Integer(), nullable=False),
    sa.Column('quality_score', sa.Float(), nullable=True),
    sa.Column('relevance_score', sa.Float(), nullable=True),
    sa.Column('campaign_id', sa.UUID(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['campaign_id'], ['campaigns.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_performance_campaign_date', 'performance_metrics', ['campaign_id', 'date'], unique=False)
    op.create_index('idx_performance_date', 'performance_metrics', ['date'], unique=False)
    op.create_index('idx_performance_entity', 'performance_metrics', ['entity_type', 'entity_id'], unique=False)
    op.create_index('idx_performance_platform', 'performance_metrics', ['platform'], unique=False)
    op.create_table('training_runs',
    sa.Column('agent_id', sa.UUID(), nullable=False),
    sa.Column('run_name', sa.String(length=255), nullable=False),
    sa.Column('algorithm', sa.String(length=50), nullable=False),
    sa.Column('hyperparameters', sa.JSON(), nullable=False),
    sa.Column('environment_config', sa.JSON(), nullable=False),
    sa.Column('status', sa.Enum('PENDING', 'RUNNING', 'COMPLETED', 'FAILED', 'CANCELLED', name='trainingstatus'), nullable=False),
    sa.Column('current_episode', sa.Integer(), nullable=False),
    sa.Column('current_timestep', sa.Integer(), nullable=False),
    sa.Column('target_timesteps', sa.Integer(), nullable=False),
    sa.Column('episode_rewards', sa.JSON(), nullable=False),
    sa.Column('episode_lengths', sa.JSON(), nullable=False),
    sa.Column('loss_values', sa.JSON(), nullable=False),
    sa.Column('current_reward', sa.Float(), nullable=True),
    sa.Column('best_reward', sa.Float(), nullable=True),
    sa.Column('moving_average_reward', sa.Float(), nullable=True),
    sa.Column('started_at', sa.DateTime(), nullable=True),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('duration_seconds', sa.Integer(), nullable=True),
    sa.Column('gpu_used', sa.Boolean(), nullable=False),
    sa.Column('cpu_cores', sa.Integer(), nullable=True),
    sa.Column('memory_gb', sa.Float(), nullable=True),
    sa.Column('error_message', sa.Text(), nullable=True),
    sa.Column('error_traceback', sa.Text(), nullable=True),
    sa.Column('checkpoint_path', sa.String(length=500), nullable=True),
    sa.Column('tensorboard_path', sa.String(length=500), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_training_run_agent_id', 'training_runs', ['agent_id'], unique=False)
    op.create_index('idx_training_run_started', 'training_runs', ['started_at'], unique=False)
    op.create_index('idx_training_run_status', 'training_runs', ['status'], unique=False)
    op.create_table('ads',
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('platform_id', sa.String(length=255), nullable=False),
    sa.Column('ad_group_id', sa.UUID(), nullable=False),
    sa.Column('status', sa.Enum('ACTIVE', 'PAUSED', 'REMOVED', 'PENDING_REVIEW', 'DISAPPROVED', name='adstatus'), nullable=False),
    sa.Column('ad_type', sa.String(length=50), nullable=False),
    sa.Column('headline', sa.String(length=500), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('display_url', sa.String(length=500), nullable=True),
    sa.Column('final_url', sa.String(length=1000), nullable=False),
    sa.Column('image_urls', postgresql.ARRAY(sa.String()), nullable=True),
    sa.Column('video_url', sa.String(length=1000), nullable=True),
    sa.Column('impressions', sa.Integer(), nullable=True),
    sa.Column('clicks', sa.Integer(), nullable=True),
    sa.Column('conversions', sa.Integer(), nullable=True),
    sa.Column('cost', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['ad_group_id'], ['ad_groups.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_ad_adgroup_id', 'ads', ['ad_group_id'], unique=False)
    op.create_index('idx_ad_platform_id', 'ads', ['platform_id'], unique=False)
    op.create_index('idx_ad_status', 'ads', ['status'], unique=False)
    op.create_table('keywords',
    sa.Column('text', sa.String(length=500), nullable=False),
    sa.Column('platform_id', sa.String(length=255), nullable=False),
    sa.Column('ad_group_id', sa.UUID(), nullable=False),
    sa.Column('match_type', sa.Enum('EXACT', 'PHRASE', 'BROAD', 'BROAD_MATCH_MODIFIER', name='keywordmatchtype'), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('max_cpc', sa.Numeric(precision=8, scale=2), nullable=True),
    sa.Column('impressions', sa.Integer(), nullable=True),
    sa.Column('clicks', sa.Integer(), nullable=True),
    sa.Column('conversions', sa.Integer(), nullable=True),
    sa.Column('cost', sa.Numeric(precision=10, scale=2), nullable=True),
    sa.Column('quality_score', sa.Float(), nullable=True),
    sa.Column('first_page_cpc', sa.Numeric(precision=8, scale=2), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['ad_group_id'], ['ad_groups.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_keyword_adgroup_id', 'keywords', ['ad_group_id'], unique=False)
    op.create_index('idx_keyword_match_type', 'keywords', ['match_type'], unique=False)
    op.create_index('idx_keyword_text', 'keywords', ['text'], unique=False)
    op.create_table('model_checkpoints',
    sa.Column('agent_id', sa.UUID(), nullable=False),
    sa.Column('training_run_id', sa.UUID(), nullable=False),
    sa.Column('checkpoint_name', sa.String(length=255), nullable=False),
    sa.Column('episode', sa.Integer(), nullable=False),
    sa.Column('timestep', sa.Integer(), nullable=False),
    sa.Column('reward', sa.Float(), nullable=False),
    sa.Column('loss', sa.Float(), nullable=True),
    sa.Column('file_path', sa.String(length=500), nullable=False),
    sa.Column('file_size_mb', sa.Float(), nullable=False),
    sa.Column('is_best', sa.Boolean(), nullable=False),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['agent_id'], ['agents.id'], ),
    sa.ForeignKeyConstraint(['training_run_id'], ['training_runs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index('idx_checkpoint_agent_id', 'model_checkpoints', ['agent_id'], unique=False)
    op.create_index('idx_checkpoint_episode', 'model_checkpoints', ['episode'], unique=False)
    op.create_index('idx_checkpoint_is_best', 'model_checkpoints', ['is_best'], unique=False)
    op.create_index('idx_checkpoint_training_run_id', 'model_checkpoints', ['training_run_id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('idx_checkpoint_training_run_id', table_name='model_checkpoints')
    op.drop_index('idx_checkpoint_is_best', table_name='model_checkpoints')
    op.drop_index('idx_checkpoint_episode', table_name='model_checkpoints')
    op.drop_index('idx_checkpoint_agent_id', table_name='model_checkpoints')
    op.drop_table('model_checkpoints')
    op.drop_index('idx_keyword_text', table_name='keywords')
    op.drop_index('idx_keyword_match_type', table_name='keywords')
    op.drop_index('idx_keyword_adgroup_id', table_name='keywords')
    op.drop_table('keywords')
    op.drop_index('idx_ad_status', table_name='ads')
    op.drop_index('idx_ad_platform_id', table_name='ads')
    op.drop_index('idx_ad_adgroup_id', table_name='ads')
    op.drop_table('ads')
    op.drop_index('idx_training_run_status', table_name='training_runs')
    op.drop_index('idx_training_run_started', table_name='training_runs')
    op.drop_index('idx_training_run_agent_id', table_name='training_runs')
    op.drop_table('training_runs')
    op.drop_index('idx_performance_platform', table_name='performance_metrics')
    op.drop_index('idx_performance_entity', table_name='performance_metrics')
    op.drop_index('idx_performance_date', table_name='performance_metrics')
    op.drop_index('idx_performance_campaign_date', table_name='performance_metrics')
    op.drop_table('performance_metrics')
    op.drop_index('idx_experiment_result_variant', table_name='experiment_results')
    op.drop_index('idx_experiment_result_metric', table_name='experiment_results')
    op.drop_index('idx_experiment_result_exp_id', table_name='experiment_results')
    op.drop_index('idx_experiment_result_date', table_name='experiment_results')
    op.drop_table('experiment_results')
    op.drop_index('idx_experiment_assignment_variant', table_name='experiment_assignments')
    op.drop_index('idx_experiment_assignment_exp_id', table_name='experiment_assignments')
    op.drop_index('idx_experiment_assignment_entity', table_name='experiment_assignments')
    op.drop_table('experiment_assignments')
    op.drop_index('idx_conversion_type', table_name='conversion_data')
    op.drop_index('idx_conversion_timestamp', table_name='conversion_data')
    op.drop_index('idx_conversion_platform', table_name='conversion_data')
    op.drop_index('idx_conversion_campaign_id', table_name='conversion_data')
    op.drop_table('conversion_data')
    op.drop_index('idx_bandit_arm_name', table_name='bandit_arms')
    op.drop_index('idx_bandit_arm_experiment_id', table_name='bandit_arms')
    op.drop_table('bandit_arms')
    op.drop_index('idx_agent_config_hash', table_name='agent_configs')
    op.drop_index('idx_agent_config_agent_id', table_name='agent_configs')
    op.drop_index('idx_agent_config_active', table_name='agent_configs')
    op.drop_table('agent_configs')
    op.drop_index('idx_adgroup_platform_id', table_name='ad_groups')
    op.drop_index('idx_adgroup_campaign_id', table_name='ad_groups')
    op.drop_table('ad_groups')
    op.drop_index('idx_platform_status', table_name='platforms')
    op.drop_index('idx_platform_name', table_name='platforms')
    op.drop_index('idx_platform_last_sync', table_name='platforms')
    op.drop_index('idx_platform_account_id', table_name='platforms')
    op.drop_table('platforms')
    op.drop_index('idx_experiment_status', table_name='experiments')
    op.drop_index('idx_experiment_platform', table_name='experiments')
    op.drop_index('idx_experiment_dates', table_name='experiments')
    op.drop_index('idx_experiment_account_id', table_name='experiments')
    op.drop_table('experiments')
    op.drop_index('idx_campaign_status', table_name='campaigns')
    op.drop_index('idx_campaign_platform_id', table_name='campaigns')
    op.drop_index('idx_campaign_account_id', table_name='campaigns')
    op.drop_table('campaigns')
    op.drop_index('idx_agent_type', table_name='agents')
    op.drop_index('idx_agent_status', table_name='agents')
    op.drop_index('idx_agent_deployed', table_name='agents')
    op.drop_index('idx_agent_account_id', table_name='agents')
    op.drop_table('agents')
    op.drop_index('idx_api_key_user_id', table_name='api_keys')
    op.drop_index('idx_api_key_expires', table_name='api_keys')
    op.drop_index('idx_api_key_active', table_name='api_keys')
    op.drop_table('api_keys')
    op.drop_index('idx_account_user_id', table_name='accounts')
    op.drop_index('idx_account_status', table_name='accounts')
    op.drop_index('idx_account_name', table_name='accounts')
    op.drop_table('accounts')
    op.drop_index('idx_user_username', table_name='users')
    op.drop_index('idx_user_role', table_name='users')
    op.drop_index('idx_user_email', table_name='users')
    op.drop_index('idx_user_active', table_name='users')
    op.drop_table('users')
    op.drop_index('idx_bid_history_platform', table_name='bid_history')
    op.drop_index('idx_bid_history_entity', table_name='bid_history')
    op.drop_index('idx_bid_history_created', table_name='bid_history')
    op.drop_table('bid_history')
    op.drop_index('idx_anomaly_unresolved', table_name='anomaly_detection')
    op.drop_index('idx_anomaly_severity', table_name='anomaly_detection')
    op.drop_index('idx_anomaly_entity', table_name='anomaly_detection')
    op.drop_index('idx_anomaly_date', table_name='anomaly_detection')
    op.drop_table('anomaly_detection')
    # ### end Alembic commands ###